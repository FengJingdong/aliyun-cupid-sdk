package apsara.odps.cupid.protocol;

option cc_generic_services = true;
option java_generic_services = true;

message Void
{
}

message String
{
  optional string value = 1;
}

message Int
{
  optional int32 value = 1;
}

message Bool
{
  optional bool value = 1;
}

message StringToStringPair
{
  optional string key = 1;
  optional string value = 2;
}

message ResourceLocation
{
  optional int32 type = 1;
  optional string name = 2;
}

message ResourceAskItem
{
  optional ResourceLocation location = 1;
  optional int32 count = 2;
}

message ResourceMachineItem
{
  optional string machine = 1;
  optional int32 count = 2;
}

message ResourceBlacklistItem
{
  optional ResourceLocation location = 1;
  optional bool add = 2;
}

message ResourceRequest
{
  repeated ResourceAskItem asks = 1;
  repeated ResourceMachineItem releases = 2;
  repeated ResourceBlacklistItem blacklist = 3;
  optional int32 maxSlotCount = 4;
}

message ResourceRequestItem
{
  optional string roleName = 1;
  optional ResourceRequest resourceRequest = 2;
}

message RequireResourceRequest
{
  repeated ResourceRequestItem resReqs = 1;
}

message ResourceDescItem
{
  optional string resource = 1;
  optional int64 count = 2;
}

message WorkerProcessInfo
{
  //not include executableUri and packageCapability, the parent process should cover them.
  repeated ResourceDescItem resources = 1;
  repeated StringToStringPair params = 2; 
  optional int64 slotId = 3;
  optional double resHardLimitRatio = 4;
}

message WorkerItem
{
  optional string workerName = 1;
  optional WorkerProcessInfo procInfo = 2;
}

message WorkerList
{
  repeated WorkerItem startList = 1;
  repeated string stopList = 2;
}

message WorkerListItem
{
  optional string roleName = 1;
  optional WorkerList workerList = 2;
}

message SendWorkerListRequest
{
  repeated WorkerListItem workerList = 1;
}

message AddRoleRequest
{
  optional string roleName = 1;
  optional int64 slotId = 2;
  optional bool isStable = 3;
  repeated ResourceDescItem resourceDesc = 4;
}

message FuxiRequest
{
    optional string url = 1;  //request method for fm, such as allocate, registerApplicationMaster etc
    optional string body = 2;  //request body 
}
service ProxyAmService
{
  rpc RequireResource(RequireResourceRequest) returns (Int);
  rpc SendWorkerList(SendWorkerListRequest) returns (Int);
  rpc AddRole(AddRoleRequest) returns (Int);
  rpc RemoveRole(String) returns (Int);
  rpc GetUserName(Void) returns (String);
  rpc GetAppName(Void) returns (String);
  rpc PostToFuxi(FuxiRequest) returns (String);
}

message AssignmentItem
{
  optional string roleName = 1;
  repeated ResourceMachineItem resources = 2;
}

message RoleMachineItem
{
  optional string roleName = 1;
  repeated string machines = 2;
}

message AssignedResourceChangeEventInfo
{
  repeated AssignmentItem assignList = 1;
  repeated RoleMachineItem timeoutMachineList = 2;
  repeated RoleMachineItem aliveMachineList = 3;
  repeated RoleMachineItem decrStableMachineInClusterBlacklist = 4;
  repeated RoleMachineItem incrStableMachineInClusterBlacklist = 5;
}

message SendWorkerListResponseEventInfo
{
  repeated string startWorkerList = 1;
  repeated string stopWorkerList = 2;
}

message WorkerFailureEntry
{
  optional string workerName = 1;
  optional int32 pid = 2;
  optional int32 errorCode = 3;
  optional string extraMsg = 4;
}

message OverUsedWorkItem
{
  optional int64 iKilledTime = 1;
  optional string killedTime = 2;
  repeated ResourceDescItem plannedResource = 3;
  repeated ResourceDescItem usedResource = 4;
}

message KilledOverUsedItem
{
  optional string workerName = 1;
  optional OverUsedWorkItem item = 2;
}

message WorkerFailureEventInfo
{
  repeated WorkerFailureEntry killedByTuboList = 1;
  repeated WorkerFailureEntry crashedList = 2;
  repeated KilledOverUsedItem killedOverUsedList = 3;
}

message EventInfo
{
  optional AssignedResourceChangeEventInfo assignedResourceChangeEventInfo = 1;
  optional SendWorkerListResponseEventInfo sendWorkerListResponseEventInfo = 4; 
  optional WorkerFailureEventInfo workerFailureEventInfo = 5;
}

message RpcRequest
{
  optional string clientName = 1;
  optional string token = 2;
  optional string method = 3;
  optional string parameter = 4;
  optional string remoteAddress = 5;
  optional int64 traceInfo = 6;
}

message RpcResponse
{
  optional int32 retCode = 1;
  optional string result = 2;
}

service ProxyAmCallbackService
{
  rpc HandleEventCallback(EventInfo) returns (Void);
  rpc HandleRpcCallback(RpcRequest) returns (RpcResponse);
}

message AmLibRoleInfo
{
  optional string roleName = 1;
  optional int32 memory = 2;
  optional int32 vCore = 3;
  optional string assignMachine = 4;
}

message ContainersFromPreviousAttemptAmLib
{
  repeated AmLibRoleInfo amlibRoleInfos = 1;
}
