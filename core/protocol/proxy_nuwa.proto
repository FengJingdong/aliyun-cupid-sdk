/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option cc_generic_services = true;
option java_generic_services = true;
package apsara.odps.cupid.nuwa.protocol;

message Void
{
}

message String
{
  optional string value = 1;
}

message Int
{
  optional int32 value = 1;
}

message Long
{
  optional int64 value = 1;
}

message Bool
{
  optional bool value = 1;
}

message StringToStringPair
{
  optional string key = 1;
  optional string value = 2;
}

message NuwaUri
{
  required string value = 1;
}

message FileContent
{
  required string value = 1;
}

message NuwaUriFileContentMap
{
  repeated StringToStringPair params = 1; 
}

message Children
{
  repeated NuwaUri paths = 1;
}

message NuwaSubscribedItemStatus
{
  required bool exist = 1;
  repeated StringToStringPair items = 2; 
}

message FileRequest
{
  required NuwaUri uri = 1;
  optional FileContent content = 2;
  optional Bool ephemeral = 3;
}

service ProxyNuwaService
{
  rpc CreateFile(FileRequest) returns (Void);
  rpc DeleteFile(FileRequest) returns (Void);
  rpc UpdateFile(FileRequest) returns (Void);
  rpc ReadFile(FileRequest) returns (FileContent);
  rpc IsExist(FileRequest) returns (Bool);
  rpc SubscribeFolder(FileRequest) returns (Long);
  rpc UnsubscribeFolder(FileRequest) returns (Void);
  rpc SubscribeFile(FileRequest) returns (Long);
  rpc UnsubscribeFile(FileRequest) returns (Void);
  rpc ReadFolder(FileRequest) returns (NuwaUriFileContentMap);
  rpc ListFolder(FileRequest) returns (Children);
}

message SubscribeCallbackRequest
{
  optional Long id = 1;
  optional NuwaSubscribedItemStatus status = 2;
}

message SessionCallbackRequest
{
  optional Long id = 1;
  optional Bool valid = 2;
}

service ProxyNuwaCallbackService
{
  rpc HandleSubscribeCallback(SubscribeCallbackRequest) returns (Void);
  rpc HandleSessionCallback(SessionCallbackRequest) returns (Void);
}
